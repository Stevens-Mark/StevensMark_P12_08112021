{"version":3,"sources":["utils/style/colors.js","assets/logo/sportsSee_logo.svg","components/BurgerNav.jsx","components/HeaderNav.jsx","components/Title.jsx","assets/logo/runningMan.svg","pages/WelcomePage.jsx","utils/Service/ManageEndpoints.js","utils/Service/FetchData.js","pages/Error.jsx","utils/Loaders/MiniLoadingIcon.jsx","assets/icons/zen.svg","assets/icons/swim.svg","assets/icons/bike.svg","assets/icons/dumbell.svg","components/SideNav.jsx","utils/HelperFunctions/Formatters.js","components/Activity.jsx","assets/icons/calories.svg","assets/icons/protiens.svg","assets/icons/fats.svg","assets/icons/carbs.svg","components/KeyData.jsx","components/Average.jsx","components/Performance.jsx","components/Score.jsx","pages/DashBoard.jsx","App.js","reportWebVitals.js","index.js"],"names":["colors","primary","secondary","tertiary","quaternary","backgroundLight","H2HeadingText","SecondaryText","NumberText","barChartText","barChartGridStroke","barChartToolTip","HamburgerWrapper","styled","div","StyledMenu","nav","open","LINK","Link","StyledBurger","button","BurgerNav","useState","setOpen","onClick","to","Image","img","NavGroup","LinkGroup","NavLink","props","activeClassName","Header","className","src","logo","alt","exact","HeadingWrapper","Title","intro","highlightedText","text","MainWrapper","main","LINKS","CardWrapper","Card","article","WelcomePage","ManageMockedEndpoints","id","category","useFetch","data","setData","isLoading","setLoading","error","setError","url","useEffect","a","fetch","response","json","console","log","fetchData","PropTypes","string","isRequired","propTypes","ErrorWrapper","ReturnLink","Error","rotate","keyframes","Loader","MiniLoadingIcon","isWhite","SportsGroup","SportLink","Copyright","p","SideNav","Yoga","Swim","Bike","Gym","TranformDate","tickItem","formattedDate","parts","split","replace","TranformDay","TranformKind","ActivityChartWrapper","Wrapper","ActivityHeading","ActivityLegend","BulletOne","span","BulletTwo","ToolTipLabel","CustomTooltip","active","payload","length","value","Activity","useParams","sessions","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","barGap","XAxis","dataKey","tickFormatter","stroke","tickLine","style","fontSize","YAxis","yAxisId","orientation","axisLine","tickCount","type","domain","tick","Tooltip","dy","content","cursor","fill","CartesianGrid","vertical","Bar","name","barSize","radius","HealthWrapper","HealthCard","HealthValue","KeyData","healthData","icons","calories","protiens","fats","carbs","map","cat","index","Object","values","ErrorMsg","AverageHeading","h2","Average","LineChart","strokeDasharray","horizontal","fontWeight","opacity","strokeOpacity","strokeWidth","Line","dot","activeDot","r","Performance","performance","reverseActivityOrder","sort","b","kind","RadarChart","cx","cy","outerRadius","PolarGrid","radialLines","PolarAngleAxis","Radar","fillOpacity","ScoreTitle","ScoreSummary","ScorePercentage","ScoreText","Score","scoreData","scoreValue","RadialBarChart","startAngle","endAngle","innerRadius","RadialBar","cornerRadius","LoaderWrapper","DashBoardWrapper","InfoWrapper","UserStats","Stats","KeyDataWrapper","aside","Analysis","DashBoard","details","userInfos","firstName","todayScore","score","keyData","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAqBeA,EAnBA,CACbC,QAAS,UACTC,UAAW,OACXC,SAAU,OACVC,WAAY,WACZC,gBAAiB,UAGjBC,cAAe,UACfC,cAAe,UACfC,WAAY,WAGZC,aAAc,UACdC,mBAAoB,UACpBC,gBAAiB,a,gBCjBJ,MAA0B,2C,eCQnCC,EAAmBC,IAAOC,IAAV,+HAShBC,EAAaF,IAAOG,IAAV,wSAKAhB,EAAOE,WAGV,qBAAGe,KAAkB,IAAM,OAMlCC,EAAOL,YAAOM,IAAPN,CAAH,2OACEb,EAAOG,SAOFH,EAAOC,SAIlBmB,EAAeP,IAAOQ,OAAV,kvBAoBArB,EAAOC,SASJ,qBAAGgB,KAAkB,gBAAkB,eAIzC,qBAAGA,KAAkB,IAAM,OACzB,qBAAGA,KAAkB,mBAAqB,mBAI1C,qBAAGA,KAAkB,iBAAmB,eAgC9CK,EApBG,WAChB,MAAwBC,oBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,OACE,eAACZ,EAAD,WACI,eAACQ,EAAD,CAAcH,KAAMA,EAAMQ,QAAS,kBAAMD,GAASP,IAAlD,UACI,wBACA,wBACA,2BAGJ,eAACF,EAAD,CAAYE,KAAMA,EAAlB,UACI,cAACC,EAAD,CAAMQ,GAAG,IAAT,qBACA,cAACR,EAAD,CAAMQ,GAAG,WAAT,oBACA,cAACR,EAAD,CAAMQ,GAAG,YAAT,wBACA,cAACR,EAAD,CAAMQ,GAAG,aAAT,kCC/FNC,EAAQd,IAAOe,IAAV,0NAWLC,EAAWhB,IAAOG,IAAV,iPACEhB,EAAOE,WAWjB4B,EAAYjB,IAAOC,IAAV,+MAWTI,EAAOL,YAAOkB,IAAPlB,CAAH,yOACEb,EAAOG,UAKX,SAAC6B,GAAD,OAAWA,EAAMC,kBACVjC,EAAOC,QAGPD,EAAOC,SA0BPiC,EAjBA,WACb,OACE,iCACE,eAACL,EAAD,WACI,cAAC,EAAD,CAAMH,GAAG,IAAT,SAAa,cAACC,EAAD,CAAOQ,UAAU,OAAOC,IAAKC,EAAMC,IAAI,WACpD,eAACR,EAAD,WACE,cAAC,EAAD,CAAMG,gBAAgB,SAASM,OAAK,EAACb,GAAG,IAAxC,qBACA,cAAC,EAAD,CAAMO,gBAAgB,SAASP,GAAG,WAAlC,oBACA,cAAC,EAAD,CAAMO,gBAAgB,SAASP,GAAG,YAAlC,wBACA,cAAC,EAAD,CAAMO,gBAAgB,SAASP,GAAG,aAAlC,8BAEA,cAAC,EAAD,UCpENc,EAAiB3B,IAAOC,IAAV,uVACTd,EAAOE,UAgBHF,EAAOC,SAoBPwC,EATD,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,KACvC,OACE,eAACJ,EAAD,WACE,+BAAKE,EAAL,IAAY,+BAAOC,OACnB,4BAAIC,QCxCK,MAA0B,uCCWlCC,EAAchC,IAAOiC,KAAV,iLAUZC,EAAQlC,YAAOM,IAAPN,CAAH,8LACCb,EAAOE,UAMJF,EAAOC,SAGhB+C,EAAcnC,IAAOC,IAAV,2NAWXmC,EAAOpC,IAAOqC,QAAV,kMAyCKC,EAxBK,WAClB,OACE,eAACN,EAAD,WACE,cAAC,EAAD,CAAOH,MAAO,4BACdC,gBAAiB,aACjBC,KAAM,yEACN,eAACI,EAAD,WACI,cAACD,EAAD,CAAOrB,GAAG,YAAV,SACI,eAACuB,EAAD,WACE,qBAAKb,IAAKC,EAAMC,IAAI,KACpB,2CAGN,cAACS,EAAD,CAAOrB,GAAG,YAAV,SACE,eAACuB,EAAD,WACE,qBAAKb,IAAKC,EAAMC,IAAI,KACpB,qD,0CCxCRc,EAAwB,SAACC,EAAIC,GACjC,OAAQA,GACN,IAAK,mBACH,MAAM,QAAN,OAAeD,EAAf,SAEF,IAAK,WACH,MAAM,OAAN,OAAcA,EAAd,kBAEF,IAAK,UACH,MAAM,QAAN,OAAeA,EAAf,0BAEF,IAAK,cACH,MAAM,QAAN,OAAeA,EAAf,qBAEF,QACE,OAAO,OCpCN,SAASE,GAASF,EAAIC,GAC3B,MAAwB/B,mBAAS,IAAjC,mBAAOiC,EAAP,KAAaC,EAAb,KACA,EAAgClC,oBAAS,GAAzC,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAA0BpC,oBAAS,GAAnC,mBAAOqC,EAAP,KAAcC,EAAd,KAGMC,EAAOV,EAAsBC,EAAIC,GAuBvC,OAlBAS,qBAAU,WAAM,4CAGd,8BAAAC,EAAA,+EAE2BC,MAAMH,GAFjC,cAEUI,EAFV,gBAGuBA,EAASC,OAHhC,OAGUX,EAHV,OAIIC,EAAQD,GAJZ,kDAMIY,QAAQC,IAAR,MACAR,GAAS,GAPb,yBASIF,GAAW,GATf,8EAHc,sBACTG,IACLH,GAAW,GAFG,mCAedW,MAEC,CAACR,IACG,CAAEJ,YAAWF,OAAMI,SDgBtBW,IAAUC,OAAOC,WACXF,IAAUC,OAAOC,WAG7BrB,EAAsBsB,UAAY,CAChCrB,GAAIkB,IAAUC,OAAOC,WACrBnB,SAAUiB,IAAUC,OAAOC,YCjB7BlB,GAASmB,UAAY,CACnBrB,GAAIkB,IAAUC,OAAOC,WACrBnB,SAAUiB,IAAUC,OAAOC,YC3C7B,I,mGAAME,GAAe9D,IAAOiC,KAAV,sZAEP9C,EAAOC,SAoBZ2E,GAAa/D,YAAOM,IAAPN,CAAH,uIACLb,EAAOC,SAsBH4E,GAXD,WAEZ,OACE,eAACF,GAAD,WACE,qCACA,8EACA,cAACC,GAAD,CAAYlD,GAAG,IAAf,sDCxCAoD,GAASC,YAAH,0HAaNC,GAASnE,IAAOC,IAAV,0LACGgE,IACU,SAAA9C,GAAK,OAAIA,EAAM/B,QAAU,OAAS,aAwB5CgF,GAZS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACE,+BACGA,EACC,cAACF,GAAD,CAAQ/E,SAAO,IAEf,cAAC+E,GAAD,OCxCK,OAA0B,gCCA1B,OAA0B,iCCA1B,OAA0B,iCCA1B,OAA0B,oCCYnCG,GAActE,IAAOG,IAAV,sVACDhB,EAAOE,WAejBkF,GAAYvE,IAAOC,IAAV,6SAcTuE,GAAYxE,IAAOyE,EAAV,+SAiCAC,GAdC,WACd,OACE,eAACJ,GAAD,WACQ,eAACC,GAAD,WACE,cAAC,IAAD,CAAM1D,GAAG,QAAT,SAAiB,qBAAKU,IAAKoD,GAAMlD,IAAI,WACrC,cAAC,IAAD,CAAMZ,GAAG,YAAT,SAAqB,qBAAKU,IAAKqD,GAAMnD,IAAI,WACzC,cAAC,IAAD,CAAMZ,GAAG,WAAT,SAAoB,qBAAKU,IAAKsD,GAAMpD,IAAI,WACxC,cAAC,IAAD,CAAMZ,GAAG,OAAT,SAAgB,qBAAKU,IAAKuD,GAAKrD,IAAI,aAEzC,cAAC+C,GAAD,2CC5CFO,GAAe,SAACC,GACpB,IAAIC,EAAgB,GAEpB,GAAID,EAAU,CACZ,IAAIE,EAAQF,EAASG,MAAM,KAC3BF,EAAa,UAAMC,EAAM,GAAGE,QAAQ,MAAO,KAE7C,OAAOH,GAUFI,GAAc,SAACL,GAGpB,GAAIA,EAAU,MADF,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnBA,EAAS,IAU7BM,GAAe,SAACN,GAGrB,GAAIA,EAAU,MADD,CAAE,SAAU,UAAW,YAAa,QAAS,UAAW,gBAC3CA,EAAS,I,oECpC/BO,GAAuBvF,IAAOqC,QAAV,wJACVlD,EAAOK,iBAMjBgG,GAAUxF,YAAOuF,GAAPvF,CAAH,kHAEFb,EAAOE,WAKZoG,GAAkBzF,IAAOC,IAAV,kcAQNd,EAAOM,eAYhBiG,GAAiB1F,IAAOC,IAAV,wMAETd,EAAOO,eASZiG,GAAY3F,IAAO4F,KAAV,sKACJzG,EAAOC,SAQZyG,GAAY7F,IAAO4F,KAAV,sKACJzG,EAAOQ,YAQZmG,GAAe9F,IAAOC,IAAV,wJACFd,EAAOC,QACZD,EAAOG,UAcZyG,GAAgB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAE/B,OAAID,GAAUC,GAAWA,EAAQC,OAE7B,eAACJ,GAAD,WACE,sCAAOG,EAAQ,GAAGE,MAAlB,WACA,sCAAOF,EAAQ,GAAGE,MAAlB,YAIC,MA4GMC,GApGE,WAEf,IAIA,EAAmC1D,GAJpB2D,cAAP7D,GAIyC,YAAzCG,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAEd,GAFA,EAAyBE,MAGvB,OAAO,cAACyC,GAAD,wDAET,GAAI3C,EACF,OACE,cAAC2C,GAAD,UACE,cAAC,GAAD,MAIJ,IAAMc,EAAW3D,EAAKA,KAAK2D,SAG3B,OACE,eAACf,GAAD,WACE,eAACE,GAAD,WACE,yDACA,eAACC,GAAD,WACE,cAACG,GAAD,qBADF,cAEE,cAACF,GAAD,qBAFF,uCAMF,cAACY,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAACC,GAAA,EAAD,CACEC,OAAQ,CACNC,IAAK,GACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,IAERC,OAAQ,EACRrE,KAAM2D,EARV,UAUE,cAACW,GAAA,EAAD,CACEC,QAAQ,MACRC,cAAepC,GACfqC,OAAM,UAAKjI,EAAOS,cAClByH,UAAU,EACVC,MAAO,CAAEC,SAAU,UAErB,cAACC,GAAA,EAAD,CACEC,QAAQ,QACRL,OAAM,UAAKjI,EAAOS,cAClB8H,YAAY,QACZC,UAAU,EACVN,UAAU,EACVO,UAAU,IACVC,KAAK,SACLC,OAAQ,CAAC,aAAc,QAEvBR,MAAO,CAAEC,SAAU,UAErB,cAACC,GAAA,EAAD,CACEC,QAAQ,WACRM,MAAM,EACNL,YAAY,OACZC,UAAU,EACVN,UAAU,EACVS,OAAQ,CAAC,cAAe,kBAE1B,cAACE,GAAA,EAAD,CAASC,GAAI,EACXC,QAAS,cAAC,GAAD,IACTC,OAAQ,CAAEC,KAAK,GAAD,OAAKjJ,EAAOW,oBAE5B,cAACuI,GAAA,EAAD,CACEjB,OAAM,UAAKjI,EAAOU,oBAClByI,UAAU,IAEZ,cAACC,GAAA,EAAD,CACEd,QAAQ,WACRe,KAAK,OACLtB,QAAQ,WACRkB,KAAI,UAAKjJ,EAAOE,WAChBoJ,QAAS,EACTC,OAAQ,CAAC,GAAI,GAAI,EAAG,KAEtB,cAACH,GAAA,EAAD,CACEd,QAAQ,QACRe,KAAK,KACLtB,QAAQ,WACRkB,KAAI,UAAKjJ,EAAOC,SAChBqJ,QAAS,EACTC,OAAQ,CAAC,GAAI,GAAI,EAAG,cCnNnB,OAA0B,qCCA1B,OAA0B,qCCA1B,OAA0B,iCCA1B,OAA0B,kCCYnCC,GAAgB3I,IAAOC,IAAV,wbAERd,EAAOQ,YAkBZiJ,GAAa5I,IAAOqC,QAAV,owBAEAlD,EAAOK,iBAkCjBqJ,GAAc7I,IAAOC,IAAV,gQAOFd,EAAOO,eAmCPoJ,GAtBC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAGXC,EAAQ,CAACC,GAAUC,GAAUC,GAAMC,IAGzC,OACE,cAACT,GAAD,UALiB,CAAC,WAAY,eAAa,WAAY,WAMzCU,KAAI,SAACC,EAAKC,GAAN,OACd,eAACX,GAAD,WACE,qBAAKrH,IAAKyH,EAAMO,GAAQ9H,IAAI,KAC5B,eAACoH,GAAD,WACGW,OAAOC,OAAOV,GAAYQ,GAAS,IACzB,IAAVA,EAAc,OAAS,IACxB,4BAAID,SALSA,S,oBC1ElB9D,GAAUxF,IAAOqC,QAAV,yhBAEClD,EAAOC,SAsBhBsK,GAAW1J,IAAOyE,EAAV,kEACHtF,EAAOG,UAIZqK,GAAiB3J,IAAO4J,GAAV,2MACTzK,EAAOG,UAUZwG,GAAe9F,IAAOC,IAAV,oMACFd,EAAOG,SACZH,EAAOE,WAgBZ0G,GAAgB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/B,OAAID,GAAUC,GAAWA,EAAQC,OAE7B,cAAC,GAAD,UACE,sCAAOD,EAAQ,GAAGE,MAAlB,aAIC,MAyFM0D,GAjFC,WAEd,IAIG,EAAmCnH,GAJvB2D,cAAP7D,GAI4C,WAAzCG,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAEf,GAFC,EAAyBE,MAGxB,OACE,cAAC,GAAD,UACE,cAAC2G,GAAD,0DAIN,GAAI7G,EACF,OACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAiBwB,SAAS,MAK9B,IAAMiC,EAAW3D,EAAKA,KAAK2D,SAG7B,OACE,eAAC,GAAD,WACE,cAACqD,GAAD,4CAEA,cAACpD,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAO,OAAzC,SACI,eAACqD,GAAA,EAAD,CACEnH,KAAM2D,EACNK,OAAQ,CACNC,IAAK,EACLC,MAAO,EACPC,MAAO,GACPC,OAAQ,GANZ,UAQA,cAACsB,GAAA,EAAD,CACE0B,gBAAgB,IAChBC,YAAY,EACZ1B,UAAU,IAEZ,cAACrB,GAAA,EAAD,CACEC,QAAQ,MACRG,UAAU,EACVM,UAAU,EACVR,cAAe9B,GACf+B,OAAM,UAAKjI,EAAOG,UAClBgI,MAAO,CAAEC,SAAU,OAAQ0C,WAAY,MAAOC,QAAS,SAEzD,cAAC1C,GAAA,EAAD,CACEN,QAAQ,gBACRS,UAAU,EACVN,UAAU,EAEVS,OAAQ,CAAC,aAAc,kBAEzB,cAACE,GAAA,EAAD,CACEE,QAAS,cAAC,GAAD,IACTC,OAAQ,CACRf,OAAO,GAAD,OAAKjI,EAAOE,WAClB8K,cAAe,GACfC,YAAa,QAEf,cAACC,GAAA,EAAD,CAAMxC,KAAK,WACTX,QAAQ,gBACRE,OAAM,UAAKjI,EAAOG,UAClB8K,YAAa,EACbD,cAAe,GACfG,KAAK,EACLC,UAAW,CAAEC,EAAG,EAAGJ,YAAa,EAAGD,cAAe,e,kDCpJzD3E,GAAUxF,IAAOqC,QAAV,4fAEClD,EAAOI,YAqBhBmK,GAAW1J,IAAOyE,EAAV,kEACHtF,EAAOG,UAyEHmL,GAhEK,WAElB,IAIA,EAAmC/H,GAJpB2D,cAAP7D,GAIyC,eAAzCG,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAEZ,GAFF,EAAyBE,MAGrB,OACE,cAAC,GAAD,UACE,cAAC,GAAD,0DAIN,GAAIF,EACF,OACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAiBwB,SAAS,MAK9B,IAAMqG,EAAc/H,EAAKA,KAAKA,KAKxBgI,EAAuB,aAAID,GAAaE,MAAK,SAACzH,EAAG0H,GAAJ,OAAUA,EAAEC,KAAO3H,EAAE2H,QAG1E,OACE,cAAC,GAAD,UACE,cAACvE,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAO,OAAzC,SAEI,eAACsE,GAAA,EAAD,CACEC,GAAG,MAAMC,GAAG,MACZC,YAAY,MACZvI,KAAMgI,EAHR,UAKA,cAACQ,GAAA,EAAD,CAAWC,aAAa,IAExB,cAACC,GAAA,EAAD,CACEnE,QAAQ,OACRC,cAAe7B,GACf8B,OAAM,UAAMjI,EAAOG,UACnB2I,GAAI,EACJZ,UAAU,EACVC,MAAO,CAAEC,SAAU,OAAQ0C,WAAY,SAEzC,cAACqB,GAAA,EAAD,CACE9C,KAAK,OACLtB,QAAQ,QACRkB,KAAI,UAAKjJ,EAAOC,SAChBmM,YAAa,a,oBC9FrB/F,GAAUxF,IAAOqC,QAAV,8iBAEGlD,EAAOK,iBAsBjBgM,GAAaxL,IAAO4J,GAAV,iJACLzK,EAAOM,eAOZgM,GAAezL,IAAOC,IAAV,2IACFd,EAAOG,UAQjBoM,GAAkB1L,IAAOyE,EAAV,uQACVtF,EAAOQ,YAUZgM,GAAY3L,IAAOyE,EAAV,+KACJtF,EAAOO,eAkDHkM,GApCD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAITC,EAAa,CACb,CAAE3F,MAAO,EAAGiC,KAAM,eAClB,CAAEjC,MAAO0F,EAAWzD,KAAM,YAG9B,OACE,eAAC,GAAD,WAEE,cAACoD,GAAD,oBACA,eAACC,GAAD,WACE,eAACC,GAAD,WAAkB,IAAMG,EAAxB,OACA,eAACF,GAAD,uBAAoB,uBAApB,kBAGF,cAACpF,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAO,OAAzC,SACE,cAACsF,GAAA,EAAD,CACEvF,MAAO,IACPC,OAAQ,IACRuF,WAAY,GACZC,SAAU,IACVC,YAAa,GACbhB,YAAa,IACbzC,QAAS,GACT9F,KAAMmJ,EARR,SASE,cAACK,GAAA,EAAD,CAAWC,aAAc,GAAIlF,QAAQ,kBC3F1CmF,GAAgBrM,IAAOC,IAAV,qHAOdqM,GAAmBtM,IAAOC,IAAV,iOAUhBsM,GAAcvM,IAAOiC,KAAV,yHAMXuK,GAAYxM,IAAOC,IAAV,uKASTwM,GAAQzM,IAAOC,IAAV,iGAMLyM,GAAiB1M,IAAO2M,MAAV,8JASdC,GAAW5M,IAAOC,IAAV,6XA2EC4M,GArDG,WAEhB,IAIA,EAAmCnK,GAJpB2D,cAAP7D,GAIyC,oBAAzCG,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAEd,GAFA,EAAyBE,MAGvB,OAAO,cAAC,GAAD,IAET,GAAIF,EACA,OACE,cAACwJ,GAAD,UACE,cAAC,GAAD,MAKN,IAAMS,EAAUnK,EAAKA,KAErB,OACE,eAAC2J,GAAD,WACE,cAAC,GAAD,IACE,eAACC,GAAD,WAEE,cAAC,EAAD,CAAO1K,MAAO,UACRC,gBAAiBgL,EAAQC,UAAUC,UACnCjL,KAAM,2EAEZ,eAACyK,GAAD,WAEI,eAACC,GAAD,WACE,cAAC,GAAD,IACE,eAACG,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,CAAOf,UAAWiB,EAAQG,YAAcH,EAAQI,cAItD,cAACR,GAAD,UACE,cAAC,GAAD,CAAS3D,WAAY+D,EAAQK,sBCpHhC,SAASC,KACtB,OACE,eAAC,IAAD,CAAQC,SAAS,8BAAjB,UACE,cAAC,EAAD,IACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO3L,OAAK,EAAC4L,KAAK,IAAIC,UAAWjL,IACjC,cAAC,IAAD,CAAOgL,KAAK,YAAYC,UAAWV,KACnC,cAAC,IAAD,CAAOU,UAAWvJ,WCpB5B,I,GAYewJ,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,GAAcC,YAAH,4nBASJ/O,EAAOG,UA6BpB6O,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACJ,GAAD,IACA,cAACb,GAAD,OAEFkB,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.98743bb8.chunk.js","sourcesContent":["// colors used on the website\n\nconst colors = {\n  primary: '#FF0000',\n  secondary: '#000',\n  tertiary: '#fff',\n  quaternary: ' #282D30',\n  backgroundLight: '#FBFBFB',\n\n  // Text\n  H2HeadingText: '#20253A',\n  SecondaryText: '#74798c',\n  NumberText: ' #282D30',\n  \n   //bar chart\n  barChartText: '#9B9EAC',\n  barChartGridStroke: '#DEDEDE',\n  barChartToolTip: '#C4C4C480',\n\n}\n\nexport default colors\n","export default __webpack_public_path__ + \"static/media/sportsSee_logo.74d87110.svg\";","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\nimport { useState } from 'react'\n\n/**\n * CSS for the component using styled.components\n */\nconst HamburgerWrapper = styled.div`\n  display: none;\n  // z-index: 6;\n\n    @media (max-width: 600px){\n      display:fixed;\n    }\n`;\n\nconst StyledMenu = styled.nav`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1.688rem;\n  justify-items: center;\n  background: ${colors.secondary};\n  width: 100%;\n  height: 4.063rem;\n  opacity: ${({ open }) => open ? '1' : '0'};\n  transition: opacity 0.6s ease-in-out;\n  position: relative;\n  // z-index: 10;\n`;\n\nconst LINK = styled(Link)`\n  color:  ${colors.tertiary};\n  font-size: clamp(1rem, 1.667vw, 1.5rem);\n  font-weight: 500;\n  padding: 0.313rem;\n  text-decoration: none;\n  transition: color 0.3s linear;\n    &:hover {\n        color: ${colors.primary};\n      }\n`;\n\nconst StyledBurger = styled.button`\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  height: 1.5rem;\n  justify-content: space-around;\n  padding: 0;\n  position: absolute;\n  right: 1rem;\n  top: 2.25rem;\n  width: 1.5rem;\n  // z-index: 10;\n\n  // &:focus {\n  //   outline: none;\n      }\n\n  div {\n    background: ${colors.primary};\n    border-radius: 0.625rem;\n    height: 0.2rem;\n    // position: relative;\n    transform-origin: 1px;\n    transition: all 0.3s linear;\n    width: 1.5rem;\n\n      :first-child {\n        transform: ${({ open }) => open ? 'rotate(45deg)' : 'rotate(0)'};\n        }\n\n      :nth-child(2) {\n        opacity: ${({ open }) => open ? '0' : '1'};\n        transform: ${({ open }) => open ? 'translateX(20px)' : 'translateX(0)'};\n        }\n\n      :nth-child(3) {\n        transform: ${({ open }) => open ? 'rotate(-45deg)' : 'rotate(0)'};\n        }\n    }\n`;\n\n/**\n *  Renders a 'Hamburger' icon for the navigation menu \n *  when the screen width is less than 600px\n *  'StyledBurger' animates from a Hamburger icon (when closed menu) to an 'X' icon (when menu open)\n * @function BurgerNav\n * @returns {JSX}\n */\nconst BurgerNav = () => {\n  const [open, setOpen] = useState(false);\n  return (\n    <HamburgerWrapper>\n        <StyledBurger open={open} onClick={() => setOpen(!open)}>\n            <div />\n            <div />\n            <div />\n        </StyledBurger>\n\n        <StyledMenu open={open}>\n            <LINK to=\"/\">Accueil</LINK>\n            <LINK to=\"/profile\">Profil</LINK>\n            <LINK to=\"/settings\">Réglage</LINK>\n            <LINK to=\"/community\">Communauté</LINK>\n        </StyledMenu>\n    </HamburgerWrapper>\n  )\n}\n\nexport default BurgerNav","\nimport { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\n// logo imports\nimport logo from '../assets/logo/sportsSee_logo.svg'\n// import Hamburger Navigation component\nimport BurgerNav from './BurgerNav'\n\n/**\n * CSS for the component using styled.components\n */\nconst Image = styled.img`\n  margin-left: 1rem;\n  margin-top: 1.75rem;\n  width: clamp(7rem, 12vw, 10rem);\n\n    @media screen and (min-width: 600px) {\n      margin-left: 0rem;\n      margin-top: 0.5rem;\n      }\n`;\n\nconst NavGroup = styled.nav`\n  background: ${colors.secondary};\n  height: 5.688rem;\n  \n    @media screen and (min-width: 600px) {\n      align-items: center;\n      display: flex;\n      justify-content: space-between;\n      padding: 0rem 1rem;\n      }\n`;\n\nconst LinkGroup = styled.div`\n  display: none;\n\n    @media screen and (min-width: 600px) {\n      display: flex;\n      justify-content: space-between;\n      padding: 0.625rem;\n      width: 80%;\n      }\n`;\n\nconst LINK = styled(NavLink)`\n  color:  ${colors.tertiary};\n  font-size: clamp(1rem, 1.667vw, 1.5rem);\n  font-weight: 500;\n  padding: 0.313rem;\n  text-decoration: none;\n    &.${(props) => props.activeClassName} {\n      color: ${colors.primary};\n        }\n    &:hover {\n      color: ${colors.primary};\n`;\n\n/**\n * Renders the Header Navigation\n * Changes to a Hamburger Nav icon if screen width less than 600px (see BurgerNav component)\n * @function Header\n * @returns (JSX)\n */\nconst Header = () => {\n  return (\n    <header>\n      <NavGroup>\n          <LINK to=\"/\"><Image className=\"logo\" src={logo} alt=\"logo\"></Image></LINK>\n          <LinkGroup>\n            <LINK activeClassName=\"active\" exact to=\"/\">Accueil</LINK>\n            <LINK activeClassName=\"active\" to=\"/profile\">Profil</LINK>\n            <LINK activeClassName=\"active\" to=\"/settings\">Réglage</LINK>\n            <LINK activeClassName=\"active\" to=\"/community\">Communauté</LINK>\n          </LinkGroup>\n            <BurgerNav />\n      </NavGroup>\n    </header>\n    )\n}\n\nexport default Header\n","\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\n\n/**\n * CSS for component using styled.components\n */\nconst HeadingWrapper = styled.div`\n  color: ${colors.secondary};\n  margin-bottom: 2.188rem;\n\n    h1 {\n      font-size: clamp(1.5rem, 3vw, 3rem);\n      font-style: normal;\n      font-weight: 500;\n      margin: unset;\n    }\n\n    p {\n      font-size: clamp(0.75rem, 1.250vw, 1.125rem);\n      font-weight: 400;\n    }\n\n    span {\n      color: ${colors.primary};\n    }\n`;\n\n/**\n * Renders a title on the welcome & dashboard pages\n * @param {string} intro: starting text in black\n * @param {string} highlightedText: color red\n * @param {string} text: short sentence\n * @returns {JSX}\n */\nconst Title = ({ intro, highlightedText, text }) => {\n  return (\n    <HeadingWrapper>\n      <h1>{intro} <span>{highlightedText}</span></h1>   \n      <p>{text}</p>\n    </HeadingWrapper>\n  )\n}\n\nexport default Title\n\n// Prototypes\n\nTitle.propTypes = {\n  intro: PropTypes.string,\n  highlightedText: PropTypes.string,\n  text: PropTypes.string,\n}\n","export default __webpack_public_path__ + \"static/media/runningMan.99d2d7e5.svg\";","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\nimport Title from '../components/Title'\n//import icons\nimport logo from '../assets/logo/runningMan.svg'\n\n\n/**\n * CSS for the component using styled.components\n */\n const MainWrapper = styled.main`\n  margin-top: 2.188rem;\n  min-height: 100vh; \n  padding: clamp(0.625rem, 1.5vw, 4.5rem);\n\n   img {\n    width: clamp(6rem, 17vw, 20rem);\n    }\n`;\n\nconst LINKS = styled(Link)`\n  color:  ${colors.secondary};\n  font-size: clamp(1rem, 1.667vw, 1.5rem);\n  font-weight: 500;\n  padding: 0.313rem;\n  text-decoration: none;\n    &:hover {\n      color: ${colors.primary};\n`;\n\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 3.125rem;\n\n    @media screen and (min-width: 600px) {\n      flex-direction: row;\n      justify-content: space-around;\n      }\n`;\n\nconst Card = styled.article`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 3.125rem;\n\n    h2 {\n      margin: unset;\n    }\n`;\n\n/**\n * Renders the 'Welcome Page' to make the demonstration of the project easier\n * @function WelcomePage\n * @returns {JSX}\n */\nconst WelcomePage = () => {\n  return (\n    <MainWrapper>\n      <Title intro={'Bienvenue sur le site de '} \n      highlightedText={'SportSee !'} \n      text={'Veuillez sélectionner un profil pour voir une démonstration...'} />\n      <CardWrapper>\n          <LINKS to='/user/12/'>\n              <Card>\n                <img src={logo} alt=''/>\n                <h2>Karl</h2>\n              </Card>\n          </LINKS>\n          <LINKS to='/user/18/'>\n            <Card>\n              <img src={logo} alt=''/>\n              <h2>Cecilia</h2>\n            </Card>\n          </LINKS>\n      </CardWrapper>\n    </MainWrapper>\n    )\n}\n\nexport default WelcomePage\n","import PropTypes from 'prop-types'\n\n/**\n * USED TO COLLECT DATA FROM THE API\n * @function ManageEndpoints\n * @param {string} category: the type of information/data requested\n * @param {string} id of user\n * @returns {string} the real URL/endpoint for the relevant data requested from the API\n */\n const  ManageEndpoints = ( id, category ) => {\n  switch (category) {\n    case 'usersGeneralInfo':\n      return `http://localhost:3000/user/${id}/`\n\n    case 'activity':\n      return `http://localhost:3000/user/${id}/activity/`\n\n    case 'average':\n      return `http://localhost:3000/user/${id}/average-sessions/`\n\n    case 'performance':\n      return `http://localhost:3000/user/${id}/performance/`\n\n    default :\n      return null\n  }\n}\n\n/**\n * USED TO COLLECT 'MOCKED' DATA (held in the public folder)\n * @function ManageMockedEndpoints\n * @param {string} category: the type of information/data requested\n * @param {string} id of user\n * @returns {string} the path for the'mocked' data requested (held in the public folder)\n */\nconst ManageMockedEndpoints = (id, category) => {\n  switch (category) {\n    case 'usersGeneralInfo':\n      return `user/${id}.json`\n\n    case 'activity':\n      return `user${id}/activity.json`\n\n    case 'average':\n      return `user/${id}/average-sessions.json`\n\n    case 'performance':\n      return `user/${id}/performance.json`\n\n    default :\n      return null\n  }\n}\n\nexport { ManageEndpoints, ManageMockedEndpoints }\n\n// Prototypes\n\nManageEndpoints.propTypes = {\n  id: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n}\n\nManageMockedEndpoints.propTypes = {\n  id: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n}","import { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { ManageMockedEndpoints } from './ManageEndpoints'\n// import { ManageEndpoints } from './ManageEndpoints'\n\n/**\n * Service to fetch data \n * @function useFetch (custom Hook)\n * @param {string} id of the user\n * @param {string} category: (userGeneralInfo, activity, average or performance)\n * @returns {object} data\n * @returns {boolean} isLoading\n * @returns {boolean} error\n */\nexport function useFetch(id, category) {\n  const [data, setData] = useState({})\n  const [isLoading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n\n  // mocked data urls\n  const url =  ManageMockedEndpoints(id, category)\n\n  // real api url/endpoints\n  // const url =  ManageEndpoints(id, category)\n\n  useEffect(() => {\n    if (!url) return\n    setLoading(true)\n    async function fetchData() {\n      try {\n        const response = await fetch(url)\n        const data = await response.json()\n        setData(data)\n      } catch (err) {\n        console.log(err)\n        setError(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n    \n  }, [url])\n  return { isLoading, data, error }\n}\n\n// Prototypes\n\nuseFetch.propTypes = {\n  id: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n}","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\n\n/**\n * CSS for the component using styled.components\n */\nconst ErrorWrapper = styled.main`\n  align-items: center;\n  color: ${colors.primary};\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  \n  h1 {\n    font-size: clamp(6rem, 20vw, 21.875rem);\n    font-weight: 700;\n    margin-bottom: 3rem;\n    margin-top: 4rem;\n  }\n\n  p {\n    font-size: clamp(1.125rem, 2.5vw, 3rem);\n    font-weight: 500;\n    margin-bottom: 8.313rem;\n    text-align: center;\n  }\n`;\n\nconst ReturnLink = styled(Link)`\n  color: ${colors.primary};\n  font-size: clamp(0.875rem, 1.5vw, 1.375rem);\n  font-weight: 500;\n  margin-bottom: 5rem;\n`;\n\n/**\n * Component to render Error 404 page\n * @function Error\n * @returns {JSX}\n */\nconst Error = () => {\n  \n  return (\n    <ErrorWrapper>\n      <h1>404</h1>\n      <p>Oups! La page que vous demandez n'existe pas.</p>\n      <ReturnLink to=\"/\">Retourner sur la page d’accueil</ReturnLink>\n    </ErrorWrapper>\n  )\n}\n\nexport default Error\n\n","// import colors from '../style/colors'\nimport styled, { keyframes } from 'styled-components'\nimport PropTypes from 'prop-types'\n\n/**\n * Keyframe for Loader component\n */\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n/**\n * CSS for the Loader component\n */\nconst Loader = styled.div`\n  animation: ${rotate} 1s infinite linear;\n  border: 0.5rem solid ${props => props.primary ? '#fff' : '#FF0000'};\n  border-bottom-color: transparent;\n  border-radius: 6.625rem;   \n  padding: 0.938rem;\n`;\n\n/**\n * Renders a loading icon (either white or red)\n * @function MiniLoadingIcon\n * @param {boolean} isWhite\n * @returns {JSX}\n */\nconst MiniLoadingIcon = ({ isWhite }) => {\n    return (\n      <span>\n        {isWhite ? ( \n          <Loader primary /> ) \n        : ( \n          <Loader /> \n        )}      \n      </span>\n    )\n}\n\nexport default MiniLoadingIcon\n\n// Prototypes\n\nMiniLoadingIcon.propTypes = {\n  isWhite: PropTypes.bool,\n}\n\n","export default __webpack_public_path__ + \"static/media/zen.e6da2f73.svg\";","export default __webpack_public_path__ + \"static/media/swim.c135dfed.svg\";","export default __webpack_public_path__ + \"static/media/bike.22f466fe.svg\";","export default __webpack_public_path__ + \"static/media/dumbell.c9f62cf1.svg\";","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\n// logo imports\nimport Yoga from '../assets/icons/zen.svg'\nimport Swim from '../assets/icons/swim.svg'\nimport Bike from '../assets/icons/bike.svg'\nimport Gym from '../assets/icons/dumbell.svg'\n\n/**\n * CSS for the component using styled.components\n */\nconst SportsGroup = styled.nav`\n  background: ${colors.secondary};\n\n    @media screen and (min-width: 1024px) {\n      display: grid;\n      grid-template-columns: clamp(3.5rem,8vw,7.5rem);\n      grid-template-rows: 6fr 2fr;\n      margin-top: unset; \n      }\n\n    img {\n        margin-top: 0.938rem; \n        width: clamp(2.5rem, 4.5vw, 4rem);\n    }\n`;\n\nconst SportLink = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  margin-top: 0.625rem;\n\n    @media screen and (min-width: 1024px) {\n      align-items: center;\n      flex-direction: column;\n      height: 100%;\n      justify-content: center;\n      }  \n`;\n\nconst Copyright = styled.p`\n  display: flex;\n  font-size: 0.75rem;\n  font-weight: 500;\n  justify-content: center;\n\n    @media screen and (min-width: 1024px) {\n      align-items: center;\n      margin-bottom: 1.25rem;\n      transform: rotate(180deg);\n      writing-mode: vertical-lr;\n      }\n`;\n\n/**\n * Renders the LeftHand Side navigation Bar\n * @function SideNav\n * @returns {JSX}\n */\nconst SideNav = () => {\n  return (\n    <SportsGroup>  \n            <SportLink>\n              <Link to='/yoga'><img src={Yoga} alt='Yoga'/></Link>\n              <Link to='/swimming'><img src={Swim} alt='Swim'/></Link>\n              <Link to='/cycling'><img src={Bike} alt='Bike'/></Link>\n              <Link to='/gym'><img src={Gym} alt='Gym'/></Link>\n            </SportLink>       \n        <Copyright>Copyright, SportSee 2020</Copyright>\n    </SportsGroup>\n    )\n}\n\nexport default SideNav","// Functions used to format the labels on the different graphs\n\n// /**\n//  * Format date on X axis from yyyy-mm-dd to dd/mm\n//  * on the Daily activities Line graph\n//  * @function TranformDate\n//  * @param {string} tickItem\n//  * @returns {string} formatted Date\n//  */\n//  const TranformDate = (tickItem) => {\n//   let formattedDate = '';\n\n//   if (tickItem) {\n//     let parts = tickItem.split('-')\n//     formattedDate = `${parts[2]}/${parts[1]}`\n//   }\n//   return formattedDate\n// }\n\n/**\n * Format date on X axis from yyyy-mm-dd to dd\n * on the Daily activities Line graph\n * @function TranformDate\n * @param {string} tickItem\n * @returns {string} formatted Date\n */\nconst TranformDate = (tickItem) => {\n  let formattedDate = '';\n  \n  if (tickItem) {\n    let parts = tickItem.split('-')\n    formattedDate = `${parts[2].replace(/^0+/, '')}`\n  }\n  return formattedDate\n}\n\n/**\n * Format day on X axis from number to letter\n * on the Average sessions Line graph\n * @function TranformDay\n * @param {number} tickItem\n * @returns {string} A Day letter\n */\n const TranformDay = (tickItem) => {\n  \n  const Day = [ 'L', 'M', 'M', 'J', 'V', 'S', 'D']\n  if (tickItem) return Day[tickItem-1]\n}\n\n/**\n * Format the labels on the radar axis from number to words\n * on the Performance Radar chart\n * @function TranformKind\n * @param {number} tickItem\n * @returns {string} Kind: one of the categories.\n */\n const TranformKind = (tickItem) => {\n\n  const Kind = [ 'Cardio', 'Energie', 'Endurance', 'Force', 'Vitesse', 'Intensité']\n  if (tickItem) return Kind[tickItem-1]\n}\n\nexport { TranformDate, TranformDay, TranformKind }\n\n","import { useParams } from 'react-router'\nimport PropTypes from 'prop-types'\nimport { useFetch } from '../utils/Service/FetchData'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\nimport MiniLoadingIcon from '../utils/Loaders/MiniLoadingIcon'\n// import helper function to format the date correctly\nimport { TranformDate } from '../utils/HelperFunctions/Formatters.js'\n\n// import Rechart items\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts'\n\n/**\n * CSS for component using styled.components\n */\nconst ActivityChartWrapper = styled.article`\n  background: ${colors.backgroundLight};\n  border-radius: 0.313rem;\n  box-shadow: 0rem 0.125rem 0.25rem 0rem #00000005;\n  height: 18.125rem;\n`;\n\nconst Wrapper = styled(ActivityChartWrapper)`\n  align-items: center;\n  color: ${colors.secondary};\n  display: flex;\n  justify-content: center;\n`;\n\nconst ActivityHeading = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: clamp(0.625rem, 0.972vw, 1rem);\n  font-weight: 500;\n  justify-content: space-between;\n\n    h2 {\n      color: ${colors.H2HeadingText};\n      font-size: clamp(1rem, 1.2vw, 1.125rem);\n      font-weight: 500;\n      margin-left: 0.313rem;\n\n        @media screen and (min-width: 375px) {\n          margin-left: 2.188rem;\n          margin-right: 2.188rem;\n          }  \n      }\n`;\n\nconst ActivityLegend = styled.div`\n  align-items: center;\n  color: ${colors.SecondaryText};\n  display: flex;\n  margin-right:0.313rem;\n\n    @media screen and (min-width: 375px) {\n      margin-right: 2.188rem;\n      }  \n`;\n\nconst BulletOne = styled.span`\n  color: ${colors.primary};\n  font-size: 2.5rem;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n  margin-left: 0.938rem;\n  margin-right: 0.313rem;\n`;\n\nconst BulletTwo = styled.span`\n  color: ${colors.NumberText};\n  font-size: 2.5rem;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n  margin-left: 0.938rem;\n  margin-right: 0.313rem;\n`;\n\nconst ToolTipLabel = styled.div`\n  background: ${colors.primary};\n  color: ${colors.tertiary};\n  font-size: 0.438rem;\n  font-weight: 500;\n  margin: 0.313rem;\n  padding: 0.313rem;\n`;\n\n/**\n * Renders the tooltip (kg/kCal) information when user hovers on barchart\n * @function CustomTooltip\n * @param {boolean} active: inital value false / becomes true when hover on barchart\n * @param {array} payload: contains data to be displayed on hover\n * @returns {JSX}\n */\nconst CustomTooltip = ({ active, payload }) => {\n\n  if (active && payload && payload.length) {\n    return (\n      <ToolTipLabel>\n        <p>{`${payload[0].value} kCal`}</p>\n        <p>{`${payload[1].value} Kg`}</p>\n      </ToolTipLabel>\n    )\n  }\n  return null\n}\n\n/**\n * Renders Activities BarChart with Weight & Calories burned\n * @function Activity\n * @returns {JSX}\n */\nconst Activity = () => {\n  // Get ID from URL param\n  const { id } = useParams()\n  \n  // Fetch the data using (custom hook) useFetch\n  // @returns @param {object} data, {boolean} isLoading and {boolean} error \n  const { data, isLoading, error } = useFetch( id, 'activity')\n\n  if (error) {\n    return <Wrapper>Aucune donnée n'a été trouvée</Wrapper>\n  }\n  if (isLoading) {\n    return (\n      <Wrapper>\n        <MiniLoadingIcon/>\n      </Wrapper>\n    )\n  } else {\n    const sessions = data.data.sessions\n    // Display Activity chart using RECHARTS\n    \n    return (\n      <ActivityChartWrapper>\n        <ActivityHeading>\n          <h2>Activité quotidienne</h2>\n          <ActivityLegend>\n            <BulletTwo>•</BulletTwo> Poids (Kg)\n            <BulletOne>•</BulletOne> Calories brûlées (kCal)\n          </ActivityLegend>\n        </ActivityHeading>\n\n        <ResponsiveContainer width='100%' height={250}>\n          <BarChart\n            margin={{\n              top: 20,\n              right: 0,\n              left: 0,\n              bottom: 30,\n              }}\n              barGap={5}\n              data={sessions} >\n\n            <XAxis\n              dataKey='day'\n              tickFormatter={TranformDate}\n              stroke={`${colors.barChartText}`}\n              tickLine={false} \n              style={{ fontSize: '14px', }} />\n\n            <YAxis\n              yAxisId='poids'\n              stroke={`${colors.barChartText}`}\n              orientation='right'\n              axisLine={false}\n              tickLine={false}\n              tickCount='3' \n              type=\"number\" \n              domain={['dataMin -3', 'auto']} \n              // domain={['dataMin -3', 'dataMax + 3']}\n              style={{ fontSize: '14px', }} />\n\n            <YAxis\n              yAxisId='calories'\n              tick={false}\n              orientation='left'\n              axisLine={false}\n              tickLine={false}\n              domain={['dataMin -10', 'dataMax + 10']}  />\n\n            <Tooltip dy={4}\n              content={<CustomTooltip />}\n              cursor={{ fill: `${colors.barChartToolTip}` }} />\n\n            <CartesianGrid\n              stroke={`${colors.barChartGridStroke}`}\n              vertical={false} />\n\n            <Bar\n              yAxisId='calories'\n              name='kCal'\n              dataKey='calories'\n              fill={`${colors.secondary}`}\n              barSize={8}\n              radius={[50, 50, 0, 0]} />\n\n            <Bar\n              yAxisId='poids'\n              name='kg'\n              dataKey='kilogram'\n              fill={`${colors.primary}`}\n              barSize={8}\n              radius={[50, 50, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n        \n      </ActivityChartWrapper>\n    )\n  }\n}\n\nexport default Activity\n\n// Prototypes\n\nCustomTooltip.propTypes = {\n  active: PropTypes.bool,\n  payload: PropTypes.array,\n}\n\n","export default __webpack_public_path__ + \"static/media/calories.3067c742.svg\";","export default __webpack_public_path__ + \"static/media/protiens.31851914.svg\";","export default __webpack_public_path__ + \"static/media/fats.5f240256.svg\";","export default __webpack_public_path__ + \"static/media/carbs.36f59707.svg\";","import colors from '../utils/style/colors'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n// import health icons\nimport calories from '../assets/icons/calories.svg'\nimport protiens from '../assets/icons/protiens.svg'\nimport fats from '../assets/icons/fats.svg'\nimport carbs from '../assets/icons/carbs.svg'\n\n/**\n * CSS for the component using styled.components\n */\nconst HealthWrapper = styled.div`\n  align-items: center;\n  color: ${colors.NumberText};\n  display: flex;\n  flex-direction: column;\n\n    @media screen and (min-width: 455px) {\n      flex-direction: row;\n      flex-wrap: wrap;\n      gap: 0.625rem;\n      justify-content: center;\n    }\n    @media screen and (min-width: 1024px) {\n      flex-direction: column;\n      height: 100%;\n      justify-content: space-between;\n      margin-left: 10%;\n    }\n`;\n\nconst HealthCard = styled.article`\n  align-items: center;\n  background: ${colors.backgroundLight};\n  border-radius: 0.313rem;\n  box-shadow: 0rem 0.125rem 0.25rem 0rem #00000005;\n  display: flex;\n  height: 4.375rem;\n  margin: 0.625rem;\n  width: 100%;\n  \n  img {\n    height: 3.125rem;\n    margin-left: 0.938rem;\n    width: 3.125rem;\n      @media screen and (min-width: 1024px) {\n        height: 3.75rem;\n        Width: 3.75rem;\n        } \n    }\n\n  @media screen and (min-width: 455px) {\n    flex: 1 1 15.625rem;\n    margin: unset;\n    min-width: 20.313rem;\n    }\n  @media screen and (min-width: 1024px) {\n    flex: unset;\n    height: 6.25rem;\n    margin: unset;\n    min-width: unset;\n    }  \n    @media screen and (min-width: 1440px) {\n      height: 7.75rem;\n      }  \n`;\n\nconst HealthValue = styled.div`\n  font-size: clamp(1rem, 1.389vw, 1.25rem);\n  font-style: normal;\n  font-weight: 700;\n  margin-left: 1.5rem;\n\n    p {\n      color: ${colors.SecondaryText};\n      font-size: 0.875rem;\n      font-weight: 500;\n      margin: unset;\n      }\n`;\n\n/**\n * Renders the data showing health (calories, carbs, fats & protiens)\n * @function KeyData\n * @param {object} healthData: holds users health data\n * @returns {JSX}\n */\nconst KeyData = ({ healthData }) => {\n\n  const categories = ['Calories', 'Protéines', 'Glucides', 'Lipides']\n  const icons = [calories, protiens, fats, carbs]\n\n  // console.log(Object.values(healthData))\n  return (\n    <HealthWrapper>\n      {categories.map((cat, index) => (\n        <HealthCard key={cat}>\n          <img src={icons[index]} alt='' />\n          <HealthValue>\n            {Object.values(healthData)[index] + ' '}\n            {index === 0 ? 'kCal' : 'g'}\n            <p>{cat}</p>\n          </HealthValue>\n        </HealthCard>\n      ))}\n    </HealthWrapper>\n  )\n}\n\nexport default KeyData\n\n// Prototypes\n\nKeyData.propTypes = {\n  healthData: PropTypes.object.isRequired,\n}\n","import { useParams } from 'react-router'\nimport PropTypes from 'prop-types'\nimport { useFetch } from '../utils/Service/FetchData'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\nimport MiniLoadingIcon from '../utils/Loaders/MiniLoadingIcon'\n// import helper function to format the day correctly\nimport { TranformDay } from '../utils/HelperFunctions/Formatters.js'\n\n// import Rechart items\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid,\n  Tooltip, \n  ResponsiveContainer \n}  from 'recharts'\n\n/**\n * CSS for the component using styled.components\n */\n const Wrapper = styled.article`\n align-items: center;\n background: ${colors.primary};\n border-radius: 0.313rem;\n box-shadow: 0rem 0.125rem 0.25rem 0rem #00000005;\n display: flex;\n height: 14.063rem;\n justify-content: center;\n position: relative;\n width: 100%;\n\n  @media screen and (min-width: 600px) {\n    max-width: 16.125rem;\n    width: 32%;\n    } \n  // @media screen and (min-width: 1025px) {\n  //   height: 16.438rem;\n  //   }    \n  @media screen and (min-width: 1440px) {\n    height: 20.313rem;\n    max-width: 20.313rem;\n    } \n`;\n\nconst ErrorMsg = styled.p`\n  color: ${colors.tertiary};\n  padding: 0.625rem;\n`;\n\nconst AverageHeading = styled.h2`\n  color: ${colors.tertiary};\n  font-size: clamp(1rem, 1.2vw, 1.125rem);\n  font-weight: 500;\n  left: 0.938rem;\n  opacity: 0.5;\n  position: absolute;\n  top: 0rem;\n  width: 10.625rem;\n`;\n\nconst ToolTipLabel = styled.div`\n  background: ${colors.tertiary};\n  color: ${colors.secondary};\n  font-size: 0.438rem;\n  font-weight: 500;\n  height: 1.25rem;\n  line-height: 0.25rem;\n  padding: 0.125rem;\n  width: 1.563rem;\n`;\n\n/**\n * Renders the tooltip (minutes) information when user hovers on the line chart\n * @function CustomTooltip\n * @param {boolean} active: inital value false / becomes true when hover on linechart\n * @param {array} payload: contains data to be displayed on hover\n * @returns {JSX}\n */\nconst CustomTooltip = ({ active, payload }) => {\n  if (active && payload && payload.length) {\n    return (\n      <ToolTipLabel>\n        <p>{`${payload[0].value} mins`}</p>\n      </ToolTipLabel>\n    )\n  }\n  return null\n}\n  \n/**\n * Renders Average Sessions Line Chart\n * @function Average\n * @returns {JSX}\n */\nconst Average = () => {\n  // Get ID from URL param\n  const { id } = useParams()\n \n  // Fetch the data using (custom hook) useFetch\n  // @returns @param {object} data, {boolean} isLoading and {boolean} error\n     const { data, isLoading, error } = useFetch( id, 'average' )\n\n    if (error) {\n      return (\n        <Wrapper>\n          <ErrorMsg>Aucune donnée n'a été trouvée</ErrorMsg>\n        </Wrapper>\n        )\n    }\n    if (isLoading) {\n      return (\n        <Wrapper>\n          <MiniLoadingIcon isWhite={true} />\n        </Wrapper>\n      )\n    }\n    else {\n      const sessions = data.data.sessions\n\n    // Display Line chart using RECHARTS\n    return (\n      <Wrapper>\n        <AverageHeading>Durée moyenne des sessions</AverageHeading>\n\n        <ResponsiveContainer width=\"100%\" height=\"100%\"> \n            <LineChart\n              data={sessions}\n              margin={{\n                top: 0,\n                right: 8,\n                left: -53,\n                bottom: 0, }} >\n\n            <CartesianGrid\n              strokeDasharray=\"0\" \n              horizontal={false} \n              vertical={false} />\n\n            <XAxis \n              dataKey=\"day\"\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={TranformDay}\n              stroke={`${colors.tertiary}`}\n              style={{ fontSize: '12px', fontWeight: '500', opacity: '0.5',}} />\n\n            <YAxis \n              dataKey=\"sessionLength\"\n              axisLine={false}\n              tickLine={false}\n              // tick={false}  \n              domain={['dataMin -2', 'dataMax + 20']} />\n\n            <Tooltip \n              content={<CustomTooltip />}\n              cursor={{ \n              stroke: `${colors.secondary}`,\n              strokeOpacity: 0.1, \n              strokeWidth: '45',}} />\n            \n            <Line type=\"monotone\" \n              dataKey=\"sessionLength\" \n              stroke={`${colors.tertiary}`} \n              strokeWidth={2}\n              strokeOpacity={0.5}\n              dot={false}\n              activeDot={{ r: 3, strokeWidth: 9, strokeOpacity: 0.3, }} />\n          </LineChart>\n\n        </ResponsiveContainer>\n      </Wrapper>   \n    )\n  }\n}\n\nexport default Average\n\n//  Prototypes\n\nCustomTooltip.propTypes = {\n  active: PropTypes.bool,\n  payload: PropTypes.array,\n}\n\n","import { useParams } from 'react-router'\nimport { useFetch } from '../utils/Service/FetchData'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\nimport MiniLoadingIcon from '../utils/Loaders/MiniLoadingIcon'\n// import helper function to format the 'kind' of activity correctly\n\nimport { TranformKind } from '../utils/HelperFunctions/Formatters.js'\n\n// import Rechart items\nimport { \n  Radar, \n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  ResponsiveContainer \n} from 'recharts';\n\n/**\n * CSS for the component using styled.components\n */\n const Wrapper = styled.article`\n align-items: center;\n background: ${colors.quaternary};\n border-radius: 0.313rem;\n box-shadow: 0rem 0.125rem 0.25rem 0rem #00000005;\n display: flex;\n height: 14.063rem;\n justify-content: center;\n width: 100%;\n\n @media screen and (min-width: 600px) {\n  max-width: 16.125rem;\n  width: 32%;\n  } \n  // @media screen and (min-width: 1025px) {\n  //   height: 16.438rem;\n  //   }    \n  @media screen and (min-width: 1440px) {\n    height: 20.313rem;\n    max-width: 20.313rem;\n    } \n`;\n\nconst ErrorMsg = styled.p`\n  color: ${colors.tertiary};\n  padding: 0.625rem;\n`;\n\n/**\n * Renders Performance Radar chart- SimpleRadarChart\n * @function Performance\n * @returns {JSX} Performance Radar chart \n */\nconst Performance = () => {\n  // Get ID from URL param\n  const { id } = useParams()\n     \n  // Fetch the data using (custom hook) useFetch\n  // @returns @param {object} data, {boolean} isLoading and {boolean} error\n  const { data, isLoading, error } = useFetch( id, 'performance')\n\n    if (error) {\n      return (\n        <Wrapper>\n          <ErrorMsg>Aucune donnée n'a été trouvée</ErrorMsg>\n        </Wrapper>\n        )\n    }\n    if (isLoading) {\n      return (\n        <Wrapper>\n          <MiniLoadingIcon isWhite={true} />\n        </Wrapper>\n      )\n    }\n    else {\n      const performance = data.data.data\n\n      // reverse the order of the data so it displays correctly in the radar chart\n      // currently the order is 'Cardio', 'Energie', 'Endurance', 'Force', 'Vitesse', 'Intensité'\n      // but we want, Intensité, Vitesse, Force, Endurance, Energie, Cardio\n      const reverseActivityOrder = [...performance].sort((a, b) => b.kind - a.kind)\n\n    // Display Radar chart using RECHARTS\n    return (\n      <Wrapper>\n        <ResponsiveContainer width=\"100%\" height=\"100%\"> \n\n            <RadarChart \n              cx=\"50%\" cy=\"50%\" \n              outerRadius=\"60%\" \n              data={reverseActivityOrder}>\n\n            <PolarGrid radialLines={false}/>\n\n            <PolarAngleAxis     \n              dataKey=\"kind\" \n              tickFormatter={TranformKind} \n              stroke= {`${colors.tertiary}`}\n              dy={4}\n              tickLine={false}\n              style={{ fontSize: '12px', fontWeight: '500',}} />\n\n            <Radar \n              name=\"Mike\" \n              dataKey=\"value\" \n              fill={`${colors.primary}`} \n              fillOpacity={0.7} />\n              \n            </RadarChart>\n\n         </ResponsiveContainer> \n      </Wrapper>   \n    )\n  }\n}\n\nexport default Performance\n\n","import PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport colors from '../utils/style/colors'\n\n// import Rechart items\nimport { \n    ResponsiveContainer,\n    RadialBarChart, \n    RadialBar \n} from 'recharts'\n\n/**\n * CSS for the component using styled.components\n */\nconst Wrapper = styled.article`\n  align-items: center;\n  background: ${colors.backgroundLight};\n  border-radius: 0.313rem;\n  box-shadow: 0rem 0.125rem 0.25rem 0rem #00000005;\n  display: flex;\n  height: 14.063rem;\n  justify-content: center;\n  position: relative;\n  width: 100%;\n \n   @media screen and (min-width: 600px) {\n     max-width: 16.125rem;\n     width: 32%;\n     } \n   // @media screen and (min-width: 1025px) {\n   //   height: 16.438rem;\n   //   }    \n   @media screen and (min-width: 1440px) {\n     height: 20.313rem;\n     max-width: 20.313rem;\n     } \n`;\n\nconst ScoreTitle = styled.h2`\n  color: ${colors.H2HeadingText};\n  font-size: clamp(1rem, 1.2vw, 1.125rem);\n  left: 0.938rem; \n  position: absolute;\n  top: 0rem;\n`;\n\nconst ScoreSummary = styled.div`\n  background: ${colors.tertiary};\n  border-radius: 50%;\n  height: 9.375rem;\n  position: absolute;\n  width: 9.375rem;\n}\n`;\n\nconst ScorePercentage = styled.p`\n  color: ${colors.NumberText};\n  font-size: clamp(1.125rem,2vw, 2rem);\n  font-weight: 700;\n  margin: 2.188rem 0rem 0rem 0rem;\n  text-align: center;\n    @media screen and (min-width: 1025px) {\n      margin: 1.563rem 0rem 0rem 0rem;\n        }  \n`;\n\nconst ScoreText = styled.p`\n  color: ${colors.SecondaryText};\n  font-size: clamp(0.75rem, 1vw, 1.125rem);\n  font-weight: 500;\n  line-height: 1.25rem;\n  margin: 0rem;\n  text-align: center;\n`;\n\n/**\n * Renders the user's Score on a RadialBarChart  - RECHARTS\n * @function Score\n * @param {number} scoreData: holds users daily score\n * @returns {JSX}\n */\nconst Score = ({ scoreData }) => {\n\n  // A 'dummy' daily score of 100% (ie, value: 1) is needed as a comparison\n  // in order to display todayScore correctly \n  const scoreValue = [ \n        { value: 1, fill: \"transparent\" }, \n        { value: scoreData, fill: \"#FF0000\" } ]\n\n    // Display RadialBarChart using RECHARTS\n    return (\n      <Wrapper>\n       \n        <ScoreTitle>Score</ScoreTitle>\n        <ScoreSummary>\n          <ScorePercentage>{100 * scoreData}%</ScorePercentage>\n          <ScoreText>de votre <br />objectif </ScoreText>\n        </ScoreSummary>\n\n        <ResponsiveContainer width=\"100%\" height=\"100%\"> \n          <RadialBarChart \n            width={700} \n            height={350} \n            startAngle={90} \n            endAngle={450} \n            innerRadius={50} \n            outerRadius={110} \n            barSize={10} \n            data={scoreValue}>\n            <RadialBar cornerRadius={50} dataKey=\"value\" />\n          </RadialBarChart>\n         </ResponsiveContainer> \n         \n      </Wrapper>   \n    )\n  }\n\nexport default Score\n\n// Prototypes\n\nScore.propTypes = {\n  ScoreData: PropTypes.number,\n}","\nimport { useParams } from 'react-router'\nimport styled from 'styled-components'\nimport { useFetch } from '../utils/Service/FetchData'\n// import components\nimport Error from './Error'\nimport MiniLoadingIcon from '../utils/Loaders/MiniLoadingIcon'\nimport SideNav from '../components/SideNav'\nimport Title from '../components/Title'\nimport Activity from '../components/Activity'\nimport KeyData from '../components/KeyData'\nimport Average from '../components/Average'\nimport Performance from '../components/Performance'\nimport Score from '../components/Score'\n\n/**\n * CSS for component using styled.components\n */\n const LoaderWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  height: 90vh;\n  justify-content: center;\n`;\n\nconst DashBoardWrapper = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n    @media screen and (min-width: 1024px) {\n      display: grid;\n      grid-template-columns: clamp(3.5rem, 8vw, 7.5rem) 1fr;\n      }  \n`;\n\nconst InfoWrapper = styled.main`\n  min-height: 100vh;\n  padding: clamp(0.625rem, 1.5vw, 4.5rem);\n  margin-top: 2.188rem;\n`;\n\nconst UserStats = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n\n    @media screen and (min-width: 1024px) {\n      flex-direction: row;\n      }\n`;\n\nconst Stats = styled.div`\n  @media screen and (min-width: 1024px) {\n    width: 75%;\n    }\n`;\n\nconst KeyDataWrapper = styled.aside`\n  margin-bottom: 1.25rem;\n\n    @media screen and (min-width: 1024px) {\n      margin-bottom: 0rem;\n      width: 25%;\n    }\n`;\n\nconst Analysis = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 0.938rem;\n  margin: 1.25rem 0rem;\n\n    @media screen and (min-width: 600px) {\n      flex-direction: row;\n      justify-content: space-between;\n      margin: 1.25rem 0rem 0rem;\n    }  \n    @media screen and (min-width: 1440px) {\n      margin-top: 4.375rem;\n    }  \n`;\n\n/**\n * Renders the Dashboard of a user with all their stats\n * @function DashBoard\n * @returns {JSX}\n */\nconst DashBoard = () => {\n // Get ID from URL param\n  const { id } = useParams()\n\n  // Fetch the data using (custom hook) useFetch\n  // @returns @param {object} data, {boolean} isLoading and {boolean} error\n  const { data, isLoading, error } = useFetch( id, 'usersGeneralInfo' )\n  \n  if (error) {\n    return <Error />\n  }\n  if (isLoading) {\n      return (\n        <LoaderWrapper>\n          <MiniLoadingIcon />\n        </LoaderWrapper>\n      )\n  }\n  else {\n    const details = data.data\n  // NOTE: data corrupted: either todayScore or score is used !!!\n    return (\n      <DashBoardWrapper> \n        <SideNav />\n          <InfoWrapper>\n\n            <Title intro={'Bonjour'} \n                  highlightedText={details.userInfos.firstName} \n                  text={'Félicitation ! Vous avez explosé vos objectifs hier 👏'} />\n      \n            <UserStats> \n\n                <Stats>\n                  <Activity />         \n                    <Analysis>          \n                      <Average />\n                      <Performance />\n                      <Score scoreData={details.todayScore || details.score}/>\n                    </Analysis>\n                </Stats>\n\n                <KeyDataWrapper>\n                  <KeyData healthData={details.keyData} />\n                </KeyDataWrapper>\n\n            </UserStats>  \n\n          </InfoWrapper>\n      </DashBoardWrapper> \n    )\n  }\n}\n\nexport default DashBoard\n\n","\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n// component imports\nimport  Header  from './components/HeaderNav'\nimport WelcomePage from './pages/WelcomePage'\nimport DashBoard from './pages/DashBoard'\nimport  Error from './pages/Error'\n\n/**\n * Manages routes & renders pages\n * @function App\n * @returns {JSX}\n */\nexport default function App() {\n  return (   \n    <Router basename='/StevensMark_P12_081120211/'>\n      <Header />  \n        <Switch>\n          <Route exact path=\"/\" component={WelcomePage}/>\n          <Route path=\"/user/:id\" component={DashBoard}/>\n          <Route component={Error} />\n        </Switch> \n    </Router>  \n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from \"styled-components\";\nimport colors from './utils/style/colors';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n/**\n * CSS Global styles for the site using styled.components\n */\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  body {  \n    height: 100%;\n    font-family: 'Roboto', 'Montserrat', 'Segoe UI', 'Oxygen', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    color: ${colors.tertiary};\n    margin: auto;\n    box-sizing: border-box;\n  } \n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    list-style-type: none;\n  }\n  \n  .sr-only {\n    border: 0;\n    clip: rect(0, 0, 0, 0);\n    height: 1px;\n    margin: -1px;\n    padding: 0px;\n    border: 0px;\n    white-space: nowrap;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}